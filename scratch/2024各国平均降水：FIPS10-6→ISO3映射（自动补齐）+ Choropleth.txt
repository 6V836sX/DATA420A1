# ============================================================
# 2024各国平均降水：FIPS10-6→ISO3映射（自动补齐）+ Choropleth
# 输出：
#   1) ./supplementary/fips_to_iso3_completed.csv   （完整映射）
#   2) ./supplementary/precip_2024_by_country.csv   （各国均值）
#   3) ./supplementary/precip_2024_choropleth.png   （地图）
# ============================================================

import os, math, json
import pandas as pd
import geopandas as gpd
import matplotlib.pyplot as plt
from pyspark.sql import functions as F

# ---------- Spark 设置（Arrow提速） ----------
spark.conf.set("spark.sql.execution.arrow.pyspark.enabled", "true")

# ---------- 0) 基础FIPS→ISO3字典（常见+高频；其余自动补全） ----------
FIPS_TO_ISO3_BASE = {
    # 常见主权国家（示例，非穷举；其余会自动补齐）
    "AF": "AFG","AL": "ALB","AG": "DZA","AN": "AND","AO": "AGO","AC": "ATG","AR": "ARG","AM": "ARM",
    "AS": "AUS","AU": "AUT","AJ": "AZE",
    "BA": "BHS","BG": "BGD","BB": "BRB","BO": "BEL","BF": "BFA","BU": "BGR","BN": "BEN","BD": "BMU",
    "BT": "BTN","BL": "BOL","BK": "BIH","BC": "BWA","BR": "BRA","BX": "BRN","BUK":"MMR",  # BU=保加利亚, BUK=缅甸（旧称Burma）
    "BY": "BLR","BZ": "BLZ",
    "CB": "KHM","CM": "CMR","CA": "CAN","CV": "CPV","CJ": "CYM","CT": "CAF","CD": "TCD","CI": "CHL",
    "CH": "CHN","CO": "COL","CN": "COM","CF": "COG","CW": "COG","CS": "CRI","IV": "CIV","HR": "HRV",
    "CU": "CUB","CY": "CYP","EZ": "CZE",
    "DA": "DNK","DJ": "DJI","DO": "DMA","DR": "DOM",
    "EC": "ECU","EG": "EGY","ES": "SLV","EK": "GNQ","ER": "ERI","EN": "EST","ET": "ETH",
    "FK": "FLK","FJ": "FJI","FI": "FIN","FR": "FRA",
    "GB": "GAB","GA": "GMB","GG": "GEO","GM": "DEU","GH": "GHA","GI": "GIB","GR": "GRC","GL": "GRL",
    "GJ": "GRD","GT": "GTM","GV": "GIN","PU": "GNB","GY": "GUY",
    "HA": "HTI","HO": "HND","HU": "HUN",
    "IC": "ISL","IN": "IND","ID": "IDN","IR": "IRN","IZ": "IRQ","EI": "IRL","IS": "ISR","IT": "ITA",
    "JM": "JAM","JA": "JPN","JO": "JOR",
    "KZ": "KAZ","KE": "KEN","KR": "KIR","KN": "KWT",
    "LA": "LAO","LG": "LVA","LE": "LBN","LT": "LSO","LI": "LBR","LY": "LBY","LS": "LIE","LH": "LTU",
    "LU": "LUX",
    "MK": "MDG","MI": "MWI","MY": "MYS","MV": "MDV","ML": "MLI","MT": "MLT","RM": "FSM","MR": "MRT",
    "MU": "MUS","MX": "MEX","MD": "MDA","MN": "MCO","MG": "MNG","MJ": "MNE","MO": "MAR","MZ": "MOZ",
    "WA": "NAM","NR": "NRU","NP": "NPL","NL": "NLD","NC": "NZL","NU": "NIU","NI": "NER","NG": "NGA",
    "NO": "NOR",
    "MUQ":"OMN","PK": "PAK","PS": "PLW","PM": "PAN","PP": "PNG","PA": "PRY","PE": "PER","RP": "PHL",
    "PL": "POL","PO": "PRT",
    "QA": "QAT",
    "RO": "ROU","RS": "RUS","RW": "RWA",
    "SC": "KNA","ST": "LCA","VC": "VCT","WS": "WSM","SM": "SMR","TP": "STP","SA": "SAU","SG": "SEN",
    "RI": "SRB","SE": "SYC","SL": "SLE","SN": "SGP","LO": "SVK","SI": "SVN","BP": "SOM","SF": "ZAF",
    "OD": "SSD","SP": "ESP","CE": "LKA","SU": "SDN","NS": "SUR","SV": "SWE","SZ": "CHE","SY": "SYR",
    "TW": "TWN","TI": "TJK","TZ": "TZA","TH": "THA","TT": "TLS","TO": "TGO","TN": "TUN","TU": "TUR",
    "TX": "TKM","TV": "TUV",
    "UG": "UGA","UP": "UKR","AE": "ARE","UK": "GBR","US": "USA","UY": "URY","UZ": "UZB",
    "NH": "VUT","VE": "VEN","VM": "VNM",
    "YM": "YEM",
    "ZA": "ZMB","ZI": "ZWE",

    # 常见属地/地区（部分库会并到主权国；此处给出常用ISO3便于merge）
    "AQ": "ATA",  # Antarctica
    "BXM": "MAC", # Macau (若你的数据用MO/MAC，按需调整)
    "HK": "HKG",
    "FO": "FRO","GLP":"GLP","GP":"GLP","GF":"GUF","PF":"PYF","NCY":"NCL",
    "RE": "REU","PFY":"PYF","GI": "GIB",
}

# ---------- 1) 用Spark聚合 2024 年国家平均降水 ----------
# 假设你已有 daily_prcp：列 [ID, DATE(yyyy-mm-dd), PRCP_VALUE, year]
# 以及 prcp_stations：列 [ID, COUNTRY_CODE, LATITUDE, LONGITUDE, ...]
prcp_2024 = (
    daily_prcp
    .filter(F.col("year") == 2024)
    .select("ID", "PRCP_VALUE")
    .groupBy("ID")
    .agg(F.avg("PRCP_VALUE").alias("PRCP_2024_station_avg"))
)

# 连接国家代码（只需要ID→COUNTRY_CODE）
station_country = prcp_stations.select("ID", "COUNTRY_CODE").dropna().dropDuplicates(["ID"])

country_avg_2024 = (
    prcp_2024.join(station_country, on="ID", how="inner")
    .groupBy("COUNTRY_CODE")
    .agg(F.avg("PRCP_2024_station_avg").alias("PRCP_2024_country_avg"),
         F.countDistinct("ID").alias("n_stations_2024"),
         F.avg("PRCP_2024_station_avg").alias("check_same"))  # 冗余校验
)

# 拉到 pandas（只有 ~218 行）
avg_pdf = country_avg_2024.toPandas()

# ---------- 2) 先用基础字典做FIPS→ISO3映射 ----------
avg_pdf["iso_a3"] = avg_pdf["COUNTRY_CODE"].map(FIPS_TO_ISO3_BASE)

# ---------- 3) 对未映射成功的FIPS，做“轻量空间补齐”（每FIPS取站点平均坐标→落国界） ----------
need_fill = avg_pdf[avg_pdf["iso_a3"].isna()]["COUNTRY_CODE"].unique().tolist()

if len(need_fill) > 0:
    # 为这些FIPS计算代表点（该FIPS内所有站点的经纬度均值）
    fips_reps = (
        prcp_stations
        .select("COUNTRY_CODE", "LATITUDE", "LONGITUDE")
        .where(F.col("COUNTRY_CODE").isin(need_fill))
        .groupBy("COUNTRY_CODE")
        .agg(F.avg("LATITUDE").alias("avg_lat"), F.avg("LONGITUDE").alias("avg_lon"))
        .toPandas()
    )

    # 点→GeoDataFrame（WGS84）
    reps_gdf = gpd.GeoDataFrame(
        fips_reps,
        geometry=gpd.points_from_xy(fips_reps["avg_lon"], fips_reps["avg_lat"]),
        crs="EPSG:4326"
    )
    # 世界底图（WGS84）
    world = gpd.read_file(gpd.datasets.get_path("naturalearth_lowres")).to_crs(4326)
    world = world[~world["iso_a3"].isin(["-99"])][["iso_a3", "name", "geometry"]]

    # 空间匹配（点落国家多边形）
    reps_joined = gpd.sjoin(reps_gdf, world, how="left", predicate="within")
    # 生成补齐映射
    filled_map = dict(zip(reps_joined["COUNTRY_CODE"], reps_joined["iso_a3"]))

    # 合并到基础字典
    FIPS_TO_ISO3_COMPLETED = {**FIPS_TO_ISO3_BASE, **filled_map}
else:
    FIPS_TO_ISO3_COMPLETED = FIPS_TO_ISO3_BASE.copy()

# 应用完整映射
avg_pdf["iso_a3"] = avg_pdf["iso_a3"].fillna(avg_pdf["COUNTRY_CODE"].map(FIPS_TO_ISO3_COMPLETED))

# 落盘保存完整映射（便于复现）
os.makedirs("./supplementary", exist_ok=True)
pd.Series(FIPS_TO_ISO3_COMPLETED).rename("ISO3").to_csv(
    "./supplementary/fips_to_iso3_completed.csv", header=True
)

# ---------- 4) 与世界底图合并并绘图（No data 灰色） ----------
world = gpd.read_file(gpd.datasets.get_path("naturalearth_lowres")).to_crs(4326)
world = world[~world["iso_a3"].isin(["-99"])]

# 合并（左表为世界底图，确保无观测国家也在图上）
world_join = world.merge(
    avg_pdf[["iso_a3", "PRCP_2024_country_avg", "n_stations_2024"]],
    on="iso_a3", how="left"
)

# 导出表
world_join[["iso_a3", "name", "PRCP_2024_country_avg", "n_stations_2024"]]\
    .to_csv("./supplementary/precip_2024_by_country.csv", index=False)

# 选择投影（Robinson观感好；失败则保持WGS84）
target_crs = "ESRI:54030"
try:
    world_plot = world_join.to_crs(target_crs)
except Exception:
    target_crs = "EPSG:4326"
    world_plot = world_join

# 绘图（无观测国家灰色）
# ========= Robinson projection choropleth with lat/lon grid (Cartopy) =========
# Requires: cartopy >= 0.20, shapely >= 2.0  (install if missing)

import numpy as np
import matplotlib.pyplot as plt
import cartopy.crs as ccrs
from cartopy.mpl.gridliner import LONGITUDE_FORMATTER, LATITUDE_FORMATTER

# 1) 准备投影：Robinson 显示，PlateCarree 为数据的经纬度参考
proj_display = ccrs.Robinson()
proj_geo = ccrs.PlateCarree()  # 数据坐标是经纬度（WGS84）

# 2) GeoDataFrame 转回 WGS84（Cartopy 需要 transform=proj_geo）
gdf_wgs84 = world_join.to_crs(4326)

# 3) 启动画布（注意：subplot_kw 指定 projection）
fig = plt.figure(figsize=(16, 8))
ax = plt.axes(projection=proj_display)

# 4) 绘制底图（No data 使用 missing_kwds）
#    geopandas 0.13+ 支持在 cartopy 轴上绘制并指定 transform
gdf_wgs84.plot(
    ax=ax,
    transform=proj_geo,
    column="PRCP_2024_country_avg",
    cmap="YlGnBu",
    legend=True,
    legend_kwds={"label": "Average Rainfall in 2024 (country mean of station means)"},
    edgecolor="#d3d9df",
    linewidth=0.4,
    missing_kwds={"color": "#f0f0f0", "edgecolor": "#d3d9df", "hatch": "///", "label": "No data"},
)

# 5) 只在左/下显示经纬度标注与网格
gl = ax.gridlines(
    crs=proj_geo,
    draw_labels=True,
    xlocs=np.arange(-180, 181, 30),
    ylocs=np.arange(-60, 91, 15),
    linestyle=":",
    linewidth=0.6,
    alpha=0.6,
    color="k",
)
gl.top_labels = False
gl.right_labels = False
gl.xlabel_style = {"size": 9}
gl.ylabel_style = {"size": 9}
gl.xformatter = LONGITUDE_FORMATTER
gl.yformatter = LATITUDE_FORMATTER

# 6) 标题与范围
ax.set_global()
ax.set_title(
    "Average Rainfall by Country (2024)\nCRS: ESRI:54030  •  Grey hatched = No data",
    fontsize=13,
)

# 7) 补“无数据”图例项（有的版本会自动添加，这里兜底）
handles, labels = ax.get_legend_handles_labels()
if "No data" not in labels:
    import matplotlib.patches as mpatches
    no_data_patch = mpatches.Patch(facecolor="#f0f0f0", edgecolor="#d3d9df", hatch="///", label="No data")
    handles.append(no_data_patch)
    ax.legend(handles=handles, loc="lower left")

# 8) 保存
import os
os.makedirs("./supplementary", exist_ok=True)
out_png = "./supplementary/precip_2024_choropleth_robinson_axes.png"
plt.tight_layout()
plt.savefig(out_png, dpi=300, bbox_inches="tight")
plt.show()

print("Saved:", out_png)

print("✓ Saved mapping to ./supplementary/fips_to_iso3_completed.csv")
print("✓ Saved country table to ./supplementary/precip_2024_by_country.csv")
print("✓ Saved map to ./supplementary/precip_2024_choropleth.png")