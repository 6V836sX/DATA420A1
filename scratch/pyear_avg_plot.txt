import pandas as pd
spark.conf.set("spark.sql.execution.arrow.pyspark.enabled", "true")

pdfy = pyear_avg.toPandas()
pdfy["ID"] = pdfy["ID"].astype("category")

# Create a datetime column representing the first day of each year
pdfy["year_start"] = pd.to_datetime(pdfy["year"].astype(str) + "-01-01", errors="coerce")

# (Optional) If the raw VALUE is in tenths of °C, convert to °C
# pdfy["TMIN_avg"] = pdfy["TMIN_avg"] / 10.0
# pdfy["TMAX_avg"] = pdfy["TMAX_avg"] / 10.0

# Keep only the columns needed for plotting
pdfy = pdfy[["ID", "year_start", "TMIN_avg", "TMAX_avg"]]

# Full yearly index from 1940 to 2025 (one timestamp per year start)
full_years = pd.date_range("1940-01-01", "2025-01-01", freq="YS")

def reindex_station_year(g):
    # Reindex to the full yearly range; missing years become NaN
    g2 = g.set_index("year_start")[["TMIN_avg", "TMAX_avg"]].reindex(full_years)
    g2.index.name = "year_start"
    return g2

blocks = []
for sid, g in pdfy.groupby("ID", observed=True):
    gg = reindex_station_year(g)
    gg["ID"] = sid
    blocks.append(gg.reset_index())

aligned_year = pd.concat(blocks, ignore_index=True)
aligned_year = aligned_year[["ID", "year_start", "TMIN_avg", "TMAX_avg"]]



import matplotlib.pyplot as plt

# Select 15 stations (customize this list if needed)
ids_all = aligned_year["ID"].drop_duplicates().tolist()
ids_15 = ids_all[:15]

nrows, ncols = 3, 5
fig, axes = plt.subplots(nrows=nrows, ncols=ncols, figsize=(20, 10), sharex=True)
axes = axes.ravel()

x_min, x_max = pd.Timestamp("1940-01-01"), pd.Timestamp("2025-12-31")
# Optional: set a fixed y-axis for easier comparison across stations
# y_min, y_max = -5, 40

for ax, sid in zip(axes, ids_15):
    g = aligned_year[aligned_year["ID"] == sid]
    ax.plot(g["year_start"], g["TMIN_avg"], label="TMIN")
    ax.plot(g["year_start"], g["TMAX_avg"], label="TMAX")
    ax.set_title(str(sid), fontsize=10)
    ax.set_xlim(x_min, x_max)
    # ax.set_ylim(y_min, y_max)
    ax.grid(True, alpha=0.3)

# Hide unused subplots if fewer than 15 stations
for k in range(len(ids_15), len(axes)):
    axes[k].axis("off")

# Add a shared legend and adjust layout
handles, labels = axes[0].get_legend_handles_labels()
fig.legend(handles, labels, loc="lower center", ncol=2)
fig.suptitle("NZ Stations • Yearly Mean TMIN/TMAX (NaN gaps, aligned 1940–2025)", y=0.98, fontsize=12)
fig.tight_layout(rect=[0, 0.04, 1, 0.96])
plt.show()

# Save figure
fig.savefig("./supplementary/nz_15stations_tmin_tmax_yearly_avg.png", dpi=300)