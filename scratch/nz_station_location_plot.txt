# === Imports ===
import geopandas as gpd
import matplotlib.pyplot as plt


# ------------------------------------------------------------
# 1) Station table (Spark → pandas)
# ------------------------------------------------------------
nz_pdf = (nz_station_loc
          .select("ID", "LATITUDE", "LONGITUDE")
          .toPandas())

# ------------------------------------------------------------
# 2) Count distinct observation days per station 
#    (remove duplicated TMIN/TMAX records on the same day)
# ------------------------------------------------------------
obs_count_df = (daily_nz_tmin_tmax
                .filter(F.col("ELEMENT").isin("TMIN", "TMAX"))
                .select("ID", "DATE")          # keep only station and date
                .distinct()                    # remove duplicate TMIN/TMAX for the same day
                .groupBy("ID")
                .agg(F.count("*").alias("obs_count")))

obs_count_pdf = obs_count_df.toPandas()

# ------------------------------------------------------------
# 3) Merge with station table & fill missing values
#    Ensure all 15 stations are included (fill NaN with 0)
# ------------------------------------------------------------
merged = pd.merge(nz_pdf, obs_count_pdf, on="ID", how="left")
merged["obs_count"] = merged["obs_count"].fillna(0).astype(int)

print(f"Stations listed: {len(nz_pdf)}")
print(f"Stations after merge: {len(merged)}")
if merged["obs_count"].isna().any():
    print("Warning: some stations still have NaN in obs_count.")
missing_ids = set(nz_pdf["ID"]) - set(merged["ID"])
if missing_ids:
    print("Missing station IDs in merged:", missing_ids)

# ------------------------------------------------------------
# 4) Build GeoDataFrame (WGS84 → NZTM2000)
# ------------------------------------------------------------
gdf_pts = gpd.GeoDataFrame(
    merged,
    geometry=gpd.points_from_xy(merged["LONGITUDE"], merged["LATITUDE"]),
    crs="EPSG:4326"
)
gdf_pts_nztm = gdf_pts.to_crs(2193)

# Ensure all 15 stations are present
assert len(gdf_pts_nztm) == 15, f"Expected 15 stations, got {len(gdf_pts_nztm)}"

# ------------------------------------------------------------
# 5) Load New Zealand polygon (Natural Earth) → NZTM2000
# ------------------------------------------------------------
world = gpd.read_file(gpd.datasets.get_path("naturalearth_lowres"))
nz_poly = world[world["name"] == "New Zealand"].to_crs(2193)

# ------------------------------------------------------------
# 6) Plotting (darker = more data → use 'Reds' colormap)
# ------------------------------------------------------------
fig, ax = plt.subplots(figsize=(8, 10))

# 6a) Base map
nz_poly.plot(ax=ax, facecolor="#dfe8f2", edgecolor="#9fb5c8",
             linewidth=0.8, zorder=0)

# 6b) Station points (color by obs_count)
vals = gdf_pts_nztm["obs_count"].to_numpy(dtype=float)
vmin = float(np.nanmin(vals))
vmax = float(np.nanmax(vals)) if np.nanmax(vals) > 0 else 1.0

gdf_pts_nztm.plot(
    ax=ax,
    column="obs_count",
    cmap="Reds",            # darker = more data
    markersize=80,
    linewidth=0.4,
    edgecolor="white",
    legend=False,
    vmin=vmin, vmax=vmax,
    zorder=1
)

# 6c) Station labels
for _, r in gdf_pts_nztm.iterrows():
    if r.geometry is not None:
        ax.annotate(
            r["ID"],
            xy=(r.geometry.x, r.geometry.y),
            xytext=(3, 3),
            textcoords="offset points",
            fontsize=6,
            color="#404040"
        )

# 6d) Map extent & title
minx, miny, maxx, maxy = nz_poly.total_bounds
pad_x = (maxx - minx) * 0.5
pad_y = (maxy - miny) * 0.5
ax.set_xlim(minx - pad_x, maxx + pad_x)
ax.set_ylim(miny - pad_y, maxy + pad_y)
ax.set_axis_off()

ax.set_title(
    "Uneven Sample Sizes Across Stations (darker = more data): Implications for Nationwide Aggregation",
    fontsize=12
)

# 6e) Standalone colorbar (right side)
cax = fig.add_axes([0.92, 0.15, 0.02, 0.7])
sm = plt.cm.ScalarMappable(cmap="Reds",
                           norm=plt.Normalize(vmin=vmin, vmax=vmax))
sm._A = []
cbar = fig.colorbar(sm, cax=cax)
cbar.set_label("Distinct Observation Days", fontsize=10)

plt.show()