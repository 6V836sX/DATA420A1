# --- imports ---
from pyspark.sql import functions as F
import pandas as pd
import matplotlib.pyplot as plt

# 1) 先把 NZ 的 TMIN/TMAX 聚合到「站点×年×月」
station_monthly = (daily_nz_tm
    .groupBy("ID", "YEAR", "MONTH", "ELEMENT")
    .agg(F.avg("VALUE").alias("avg_val"))
    # 用真正的日期，固定为每月第一天，便于排序/断线
    .withColumn("YM", F.to_date(F.format_string("%04d-%02d-01", F.col("YEAR"), F.col("MONTH"))))
    .orderBy("ID", "YEAR", "MONTH")
    .toPandas()
)

# 如果 VALUE 还是 0.1°C 的单位（很多 GHCN 温度是十分之一摄氏度），可以换算到 °C：
# station_monthly["avg_val"] = station_monthly["avg_val"] / 10.0

# 2) 画每个站点的子图，并对齐完整月份索引：缺口->NaN->断线
stations = station_monthly["ID"].unique()
fig, axes = plt.subplots(len(stations), 1, figsize=(12, 3*len(stations)), sharex=True)

if len(stations) == 1:
    axes = [axes]  # 统一成可迭代

for i, st in enumerate(stations):
    ax = axes[i]
    st_df = station_monthly[station_monthly["ID"] == st].copy()

    # 转成宽表：index=YM，columns=TMIN/TMAX
    wide = (st_df.pivot_table(index="YM", columns="ELEMENT", values="avg_val", aggfunc="mean")
                 .sort_index())

    # 构造完整的「月初」时间索引；缺失的月份会得到 NaN，从而图形断线
    full_idx = pd.date_range(wide.index.min(), wide.index.max(), freq="MS")
    wide = wide.reindex(full_idx)

    # 画线（断线处为 NaN，将不会连接）
    if "TMIN" in wide.columns:
        ax.plot(wide.index, wide["TMIN"], label="TMIN")
    if "TMAX" in wide.columns:
        ax.plot(wide.index, wide["TMAX"], label="TMAX")

    # （可选）平滑处理：例如 6 个月滑动平均
    # smooth = wide.rolling(window=6, min_periods=1).mean()
    # if "TMIN" in smooth.columns: ax.plot(smooth.index, smooth["TMIN"], label="TMIN (6-mo MA)")
    # if "TMAX" in smooth.columns: ax.plot(smooth.index, smooth["TMAX"], label="TMAX (6-mo MA)")

    ax.set_title(f"Station {st}")
    ax.legend(loc="best")

plt.xlabel("Year-Month")
plt.xticks(rotation=90)
plt.tight_layout()
plt.show()


# 3) 全国平均时间序列（同样用完整月份索引显示缺口）
nz_monthly = (daily_nz_tm
    .groupBy("YEAR", "MONTH", "ELEMENT")
    .agg(F.avg("VALUE").alias("avg_val"))
    .withColumn("YM", F.to_date(F.format_string("%04d-%02d-01", F.col("YEAR"), F.col("MONTH"))))
    .orderBy("YEAR", "MONTH")
    .toPandas()
)
# nz_monthly["avg_val"] = nz_monthly["avg_val"] / 10.0  # 如需换算到 °C

wide_nz = (nz_monthly.pivot_table(index="YM", columns="ELEMENT", values="avg_val", aggfunc="mean")
                      .sort_index())
full_idx_nz = pd.date_range(wide_nz.index.min(), wide_nz.index.max(), freq="MS")
wide_nz = wide_nz.reindex(full_idx_nz)

plt.figure(figsize=(12, 5))
if "TMIN" in wide_nz.columns:
    plt.plot(wide_nz.index, wide_nz["TMIN"], label="TMIN")
if "TMAX" in wide_nz.columns:
    plt.plot(wide_nz.index, wide_nz["TMAX"], label="TMAX")

# （可选）全国平滑
# smooth_nz = wide_nz.rolling(window=6, min_periods=1).mean()
# if "TMIN" in smooth_nz.columns: plt.plot(smooth_nz.index, smooth_nz["TMIN"], label="TMIN (6-mo MA)")
# if "TMAX" in smooth_nz.columns: plt.plot(smooth_nz.index, smooth_nz["TMAX"], label="TMAX (6-mo MA)")

plt.title("NZ Average Monthly TMIN/TMAX")
plt.xlabel("Year-Month")
plt.ylabel("Temperature (same unit as VALUE)")
plt.legend(loc="best")
plt.xticks(rotation=90)
plt.tight_layout()
plt.show()